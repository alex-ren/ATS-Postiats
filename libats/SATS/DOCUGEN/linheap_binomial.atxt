(* ****** ****** *)

%{
implement srcfilename_get () = "../linheap_binomial.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_linheap_binomial")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/linheap_binomial\
")

(* ****** ****** *)

#declpreamble("\

This package implements a linear heap based on the binomial-heap
structure. The implementation is largely of functional style (with manual
memory management) and supports only mergeable-heap operations. In
particular, it does not support the decrease-key operation. \

")

(* ****** ****** *)

#declnamesynop("heap") // = heap_vtype
#decldescrpt("\

The type constructor #stacode("heap") is a shorthand for
#stacode("heap_vtype"). ")

(* ****** ****** *)

#declnamesynop("heap_vtype")
#decldescrpt("\

Given a viewtype T, the abstract viewtype #stacode("heap_vtype(T)") is
for a heap storing items of the viewtype T. Note that
#stacode("heap_vtype") is co-variant in its argument. ")

(* ****** ****** *)

#declnamesynop("compare_elt_elt")
#decldescrpt("This function is for comparing heap elements.")

(* ****** ****** *)

#declnamesynop("linheap_nil")
#decldescrpt("This function creates an empty heap.")

(* ****** ****** *)

#declnamesynop("linheap_is_nil")
#decldescrpt("This function tests whether a given heap is empty.")

#declnamesynop("linheap_isnot_nil")
#decldescrpt("This function tests whether a given heap is non-empty.")

(* ****** ****** *)

#declnamesynop("linheap_size")
#decldescrpt("\

This function computes the size of a given heap. It is time-complexity
O(1).")

(* ****** ****** *)

#declnamesynop("linheap_insert")
#decldescrpt("\

This function inserts an element into a given heap.  It is of
time-complexity O(log(n)).")

(* ****** ****** *)

#declnamesynop("linheap_merge")
#decldescrpt("\

This function merges two given heaps into one. It is of time-complexity
O(log(n)).")

(* ****** ****** *)

#declnamesynop("linheap_getmin")
#decldescrpt("\

Given a heap [hp], this function copies the minimal element in [hp] into
[res] and returns true if [hp] is not empty. Otherwise, the function
returns false. For a heap of size n, the time-complexity of the function
is O(log(n)). Note that the type for the elements in the heap is assumed
to be non-linear.  ")

#declfunretval("\

The boolean value returned by this function indicates whether the given
heap is empty.")

#declnamesynop("linheap_getmin_ref")
#decldescrpt("\

Given a heap [hp], this function returns the pointer to the location where
the minimal element in [hp] is stored if [hp] is not empty. Otherwise, the
function returns the null pointer.  ")

#declnamesynop("linheap_getmin_opt")
#decldescrpt("\

This function is the optional version of #dyncode("linheap_getmin_opt"). ")

(* ****** ****** *)

#declnamesynop("linheap_delmin")
#decldescrpt("\

This function is similar to #dyncode("linheap_getmin") except that it
removes the minimal element in [hp] if [hp] is not empty.  For a heap of
size n, the time-complexity of the function in O(log(n)).  ")

#declfunretval("\

The boolean value returned by this function indicates whether the given
heap is empty.")

#declnamesynop("linheap_delmin_opt")
#decldescrpt("\

This function is the optional version of #dyncode("linheap_delmin_opt"). ")

(* ****** ****** *)

#declnamesynop("linheap_free")
#decldescrpt("\

This function is called to free a given linear heap [hp]. Note that the
elements contained in [hp] are assumed to be non-linear.  ")

(* ****** ****** *)

#declnamesynop("linheap_freelin")
#decldescrpt("\

This function is called to free a given linear heap [hp]. It calls
#dyncode("linmap_freelin$clear") to free the elements contained in [hp].\

")
#declnamesynop("linheap_freelin$clear")

(* ****** ****** *)

#declnamesynop("linheap_free_ifnil")
#decldescrpt("\

Given a heap [hp], this function frees [hp] and returns false if [hp] is
empty.  Otherwise, the function keeps [hp] and returns true. ")

(* ****** ****** *)

(* end of [linheap_binomial.atxt] *)
