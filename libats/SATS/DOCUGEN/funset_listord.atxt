(* ****** ****** *)

%{
implement srcfilename_get () = "../funset_listord.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_funset_listord")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/funset_listord\
")

(* ****** ****** *)

#declpreamble("\

#para("\

This package implements functional sets based on lists ordered according to
some total ordering. The implementation should only be used for handling
sets that are relatively small.  For large sets, an implementation based on
balanced trees may be considered.  ")

")

(* ****** ****** *)

#declnamesynop("set")
#decldescrpt("\

The type constructor #stacode("set") is a shorthand for
#stacode("set_t0ype_type").  ")

#declnamesynop("set_type")

(* ****** ****** *)

#declnamesynop("compare_elt_elt")
#decldescrpt("This function is for comparing elements in sets.")

(* ****** ****** *)

#declnamesynop("funset_nil")
#decldescrpt("This function forms an empty set.")

#declnamesynop("funset_sing")
#decldescrpt("Given an element x, this function forms the singleton set
containing x.")

(* ****** ****** *)

#declnamesynop("funset_make_list")
#decldescrpt("\

Given a list xs, this function forms the set consisting of elements in
xs. Note that duplicated elements in xs are all removed in the formed set.
")

(* ****** ****** *)

#declnamesynop("funset_is_nil")
#declnamesynop("funset_isnot_nil")

(* ****** ****** *)

#declnamesynop("funset_size")
#decldescrpt("\

This function returns the size of a given set xs. Its time complexity is
O(|xs|). ")

(* ****** ****** *)

#declnamesynop("funset_is_member")
#decldescrpt("\

This function tests whether an element occurs in a given set xs.  The time
complexity of this function is O(|xs|).  ")

#declnamesynop("funset_isnot_member")
#decldescrpt("\

This function tests whether an element does not occur in a given set xs.  The
time complexity of this function is O(|xs|).  ")

(* ****** ****** *)

#declnamesynop("funset_insert")
#decldescrpt("\

This function adds an element to a given set xs.  The time complexity
of this function is O(|xs|). ")

#declfunretval("\
The function returns a boolean value indicating whether the element is
already in the set xs. ")

(* ****** ****** *)

#declnamesynop("funset_remove")
#decldescrpt("\

This function removes an element from a given set xs.  The time complexity
of this function is O(|xs|).")

#declfunretval("\
The function returns a boolean value indicating whether the element is
actually removed from the set xs. ")

(* ****** ****** *)

#declnamesynop("funset_union")
#decldescrpt("\

Given sets xs1 and xs2, this function returns the union of xs1 and xs2.
The time complexity of this function is O(|xs1|+|xs2|).  ")

#declnamesynop("funset_intersect")
#decldescrpt("\

Given sets xs1 and xs2, this function returns the intersection of xs1 and
xs2.  The time complexity of this function is O(|xs1|+|xs2|).  ")

#declnamesynop("funset_diff")
#decldescrpt("\

Given sets xs1 and xs2, this function returns the difference of xs1 from
xs2.  The time complexity of this function is O(|xs1|+|xs2|).  ")

#declnamesynop("funset_symdiff")
#decldescrpt("\

Given sets xs1 and xs2, this function returns the symmetric difference
between xs1 and xs2.  The time complexity of this function is
O(|xs1|+|xs2|).  ")

(* ****** ****** *)

#declnamesynop("funset_equal")
#decldescrpt("\

This function tests whether two given sets xs1 and xs2 are equal.  The time
complexity of this function is O(|xs1|+|xs2|).  ")

(* ****** ****** *)

#declnamesynop("funset_compare")
#decldescrpt("\

This function compares two given sets xs1 and xs2 based on the ordering
induced from the one on set elements, which is implemented by
#dyncode("compare_elt_elt").  The time complexity of this function is
O(|xs1|+|xs2|).  ")

(* ****** ****** *)

#declnamesynop("funset_is_subset")
#decldescrpt("\

Given sets xs1 and xs2, this function tests whether xs1 is a subset of xs2.
The time complexity of this function is O(|xs1|+|xs2|).  ")

#declnamesynop("funset_is_supset")
#decldescrpt("\

Given sets xs1 and xs2, this function tests whether xs1 is a superset of
xs2.  The time complexity of this function is O(|xs1|+|xs2|).  ")

(* ****** ****** *)

#declnamesynop("fprint_funset")
#decldescrpt("\

This function prints out the elements in a given set. It calls
#dyncode("fprint_funset$sep") to print a separator between every two
consecutive elements.  ")

#declnamesynop("fprint_funset$sep")
#decldescrpt("\

This function template is called by #dyncode("fprint_funset"). It
prints out the string \", \" (a comma followed by a space character)
by default.\

")

(* ****** ****** *)

#declnamesynop("funset_foreach")
#declnamesynop("funset_foreach_env")
#declnamesynop("funset_foreach$fwork")

(* ****** ****** *)

#declnamesynop("funset_listize")
#decldescrpt("\

Given a set xs, this function returns a linear list consisting of all the
elements in xs.  The time complexity of this function is O(|xs|).  ")

(* ****** ****** *)

#declnamesynop("funset_flistize")
#decldescrpt("\

Given a set xs, this function returns a linear list consisting of all the
elements returned by calling #dyncode("funset_flistize$fopr") on elements
in xs.  ")

#declnamesynop("funset_flistize$fopr")

(* ****** ****** *)

#declnamesynop("funset2list")
#decldescrpt("\

This function casts a set into a list in which elements are ordered
descendingly.  ")

(* ****** ****** *)

(* end of [funset_listord.atxt] *)
