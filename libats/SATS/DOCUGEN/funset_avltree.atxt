(* ****** ****** *)

%{
implement srcfilename_get () = "../funset_avltree.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_funset_avltree")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/funset_avltree\
")

(* ****** ****** *)

#declpreamble("\

This package implements functional sets based on AVL-trees.

")

(* ****** ****** *)

#declnamesynop("set")
#decldescrpt("\

The type constructor #stacode("set") is a shorthand for
#stacode("set_type").  ")

#declnamesynop("set_type")

(* ****** ****** *)

#declnamesynop("compare_elt_elt")
#decldescrpt("This function is for comparing elements in sets.")

(* ****** ****** *)

#declnamesynop("funset_nil")
#decldescrpt("This function forms an empty set.")
#declnamesynop("funset_make_nil")
#decldescrpt("This function is the same as #dyncode("funset_nil").")

(* ****** ****** *)

#declnamesynop("funset_sing")
#decldescrpt("Given an element x, this function forms the singleton set
containing x.")
#declnamesynop("funset_make_sing")
#decldescrpt("This function is the same as #dyncode("funset_sing").")

(* ****** ****** *)

#declnamesynop("funset_make_list")
#decldescrpt("\

Given a list xs, this function forms the set consisting of elements in
xs. Note that duplicated elements in xs are all removed in the formed set.
")

(* ****** ****** *)

#declnamesynop("funset_is_nil")
#declnamesynop("funset_isnot_nil")

(* ****** ****** *)

#declnamesynop("funset_size")
#decldescrpt("\

This function returns the size of a given set xs. Its time complexity is
O(n). ")

(* ****** ****** *)

#declnamesynop("funset_is_member")
#decldescrpt("\

This function tests whether an element occurs in a given set xs.  The time
complexity of this function is O(log(n)).  ")

#declnamesynop("funset_isnot_member")
#decldescrpt("\

This function tests whether an element does not occur in a given set xs.  The
time complexity of this function is O(log(n)).  ")

(* ****** ****** *)

#declnamesynop("funset_insert")
#decldescrpt("\

This function adds an element to a given set xs.  The time complexity
of this function is O(log(n)). ")

#declfunretval("\
The function returns a boolean value indicating whether the element is
already in the set xs. ")

(* ****** ****** *)

#declnamesynop("funset_remove")
#decldescrpt("\

This function removes an element from a given set xs.  The time
complexity of this function is O(log(n)).")

#declfunretval("\
The function returns a boolean value indicating whether the element is
actually removed from the set xs. ")

(* ****** ****** *)

#declnamesynop("funset_getmax")
#declnamesynop("funset_getmax_opt")
#declnamesynop("funset_getmin")
#declnamesynop("funset_getmin_opt")

(* ****** ****** *)

#declnamesynop("funset_takeoutmax")
#declnamesynop("funset_takeoutmax_opt")
#declnamesynop("funset_takeoutmin")
#declnamesynop("funset_takeoutmin_opt")

(* ****** ****** *)

#declnamesynop("funset_union")
#decldescrpt("\

Given sets xs1 and xs2, this function returns the union of xs1 and xs2. ")

#declnamesynop("funset_intersect")
#decldescrpt("\

Given sets xs1 and xs2, this function returns the intersection of xs1 and
xs2.  ")


#declnamesynop("funset_diff")
#decldescrpt("\

Given sets xs1 and xs2, this function returns the difference of xs1 from
xs2. ")

#declnamesynop("funset_symdiff")
#decldescrpt("\

Given sets xs1 and xs2, this function returns the symmetric difference
between xs1 and xs2.  ")

(* ****** ****** *)

#declnamesynop("funset_equal")
#decldescrpt("\

This function tests whether two given sets xs1 and xs2 are equal. ")

(* ****** ****** *)

#declnamesynop("funset_compare")
#decldescrpt("\

This function compares two given sets xs1 and xs2 based on the ordering
induced from the one (implemented by #dyncode("compare_elt_elt")) on set
elements.  ")

(* ****** ****** *)

#declnamesynop("funset_is_subset")
#decldescrpt("\

Given sets xs1 and xs2, this function tests whether xs1 is a subset of xs2.  ")

#declnamesynop("funset_is_supset")
#decldescrpt("\

Given sets xs1 and xs2, this function tests whether xs1 is a superset of
xs2. ")

(* ****** ****** *)

#declnamesynop("fprint_funset")
#decldescrpt("\

This function prints out the elements in a given set. It calls
#dyncode("fprint_funset$sep") to print a separator between every two
consecutive elements.  ")

#declnamesynop("fprint_funset$sep")
#decldescrpt("\

This function template is called by #dyncode("fprint_funset"). It
prints out the string \", \" (a comma followed by a space character)
by default.\

")

(* ****** ****** *)

#declnamesynop("funset_foreach")
#declnamesynop("funset_foreach_env")
#declnamesynop("funset_foreach$fwork")

(* ****** ****** *)

#declnamesynop("funset_listize")
#decldescrpt("\

Given a set xs, this function returns a linear list consisting of all the
elements in xs.  ")

(* ****** ****** *)

#declnamesynop("funset_flistize")
#decldescrpt("\

Given a set xs, this function returns a linear list consisting of all the
elements returned by calling #dyncode("funset_flistize$fopr") on elements
in xs.  ")

#declnamesynop("funset_flistize$fopr")

(* ****** ****** *)

#declnamesynop("funset_avltree_height")
#decldescrpt("\

Given a set represented by some AVL-tree, this function returns the
height of the tree. ")

(* ****** ****** *)

(* end of [funset_avltree.atxt] *)
