(* ****** ****** *)

%{
implement srcfilename_get () = "../ilist_prf.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_ilist_prf")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/ilist_prf\
")

(* ****** ****** *)

#declpreamble("\

This package contains some common proof functions involving integer sequences.

")

(* ****** ****** *)

#declnamesynop("ilist")

(* ****** ****** *)

#declnamesynop("LENGTH")
#declnamesynop("length_istot")
#declnamesynop("length_isfun")
#declnamesynop("length_isnat")

(* ****** ****** *)

#declnamesynop("SNOC")
#declnamesynop("snoc_istot")
#declnamesynop("snoc_isfun")
#declnamesynop("lemma_snoc_length")

(* ****** ****** *)

#declnamesynop("APPEND")
#declnamesynop("append_istot")
#declnamesynop("append_isfun")

(* ****** ****** *)

#declnamesynop("append_unit_left")
#decldescrpt("\

This function proves that the nil sequence is a left unit for the append
operation. ")

#declnamesynop("append_unit_right")
#decldescrpt("\

This function proves that the nil sequence is a right unit for the append
operation. ")

(* ****** ****** *)

#declnamesynop("append_sing")

(* ****** ****** *)

#declnamesynop("lemma_append_length")
#decldescrpt("\

Given two sequences xs1 and xs2, this function proves that the length of
the concatenation of xs1 and xs2 equals the length of xs1 plus
the length of xs2.  ")

(* ****** ****** *)

#declnamesynop("lemma_append_snoc")

(* ****** ****** *)

#declnamesynop("lemma_append_assoc")
#decldescrpt("\

This function proves that the append operation on sequences is
associative.")

(* ****** ****** *)

#declnamesynop("REVAPP")
#declnamesynop("revapp_istot")
#declnamesynop("revapp_isfun")

(* ****** ****** *)

#declnamesynop("lemma_revapp_length")

(* ****** ****** *)

#declnamesynop("NTH")
#declnamesynop("RNTH")
#declnamesynop("lemma_rnth_nth")
#declnamesynop("lemma_nth_rnth")

(* ****** ****** *)

#declnamesynop("lemma_nth_ilisteq")

(* ****** ****** *)

#declnamesynop("lemma1_revapp_nth")
#declnamesynop("lemma2_revapp_nth")

(* ****** ****** *)

#declnamesynop("lemma_reverse_nth")

(* ****** ****** *)

#declnamesynop("lemma_reverse_symm")
#decldescrpt("\

This function proves that the #dyncode("REVERSE") relation is symmetric. ")

(* ****** ****** *)

#declnamesynop("INSERT")

(* ****** ****** *)

#declnamesynop("lemma_insert_length")

(* ****** ****** *)

#declnamesynop("lemma_insert_nth_at")
#declnamesynop("lemma_insert_nth_lt")
#declnamesynop("lemma_insert_nth_gte")

(* ****** ****** *)

#declnamesynop("lemma_nth_insert")

(* ****** ****** *)

#declnamesynop("UPDATE")

(* ****** ****** *)

#declnamesynop("INTERCHANGE")

(* ****** ****** *)

#declnamesynop("PERMUTE")

(* ****** ****** *)

#declnamesynop("LTB")
#declnamesynop("LTEB")
#declnamesynop("ISORD")

(* ****** ****** *)

#declnamesynop("SORT")

(* ****** ****** *)

(* end of [ilist_prf.atxt] *)
