(* ****** ****** *)

%{
implement srcfilename_get () = "../qlist.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_qlist")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/qlist\
")

(* ****** ****** *)

#declpreamble("\

#para("\

This package implements linear queues based on the singly-linked list
structure. Such queues, often referred to as qlist-objects, can be employed
to accumulate items that need to be returned in a list in which the items
appear in the same order as they are accumulated.

")

")

(* ****** ****** *)

#declnamesynop("qlist")
#declnamesynop("qlist_vtype")
#declnamesynop("qlist0")
#declnamesynop("qlist1")

(* ****** ****** *)

#declnamesynop("qlist_make_nil")
#declnamesynop("qlist_free_nil")

(* ****** ****** *)

#declnamesynop("qlist_is_nil")
#decldescrpt("\

This function tests whether a given queue is empty.

")

#declnamesynop("qlist_isnot_nil")
#decldescrpt("\

This function tests whether a given queue is non-empty.

")

(* ****** ****** *)

#declnamesynop("qlist_length")
#decldescrpt("

This function computes the length of a given queue.")

(* ****** ****** *)

#declnamesynop("qlist_insert")
#decldescrpt("\

This function inserts an element at the end of a given queue.\

")

(* ****** ****** *)

#declnamesynop("qlist_takeout")
#decldescrpt("\

This function takes out the element at the front of a given queue if the
queue is not empty, and returns true. Otherwise, it returns false.\

")

(* ****** ****** *)

#declnamesynop("qlist_takeout_opt")
#decldescrpt("\
This function is the optional version of #dyncode("qlist_takeout").\
")

(* ****** ****** *)

#declnamesynop("qlist_takeout_list")
#decldescrpt("\

This function takes out all of the elements in a given queue. Note
that the complexity of the funtion is O(1).

")
#declexample("

The following code demonstrates a typical use of a qlist as a FIFO
accumulator:

#pats2xhtmld_tryit('\
//
staload "libats/SATS/qlist.sats"
//
fun{
a:t0p
} list_copy
  {n:int}
(
  xs: list (a, n)
) : list_vt (a, n) = let
//
fun loop
  {i,j:int}
(
  xs: list (a, i), pq: qlist (a, j)
) : list_vt (a, i+j) = let
in
//
case+ xs of
| list_cons
    (x, xs) => let
    val () = qlist_insert (pq, x)
  in
    loop (xs, pq)
  end // end of [list_cons]
| list_nil () => let
    val res = qlist_takeout_list (pq)
    val () = qlist_free_nil (pq)
  in
     res
  end // end of [list_nil]
//
end // end of [loop]
//
in
  loop (xs, qlist_make_nil ())
end // end of [list_copy]
')

")

(* ****** ****** *)

#declnamesynop("qlist_foreach$cont")
#declnamesynop("qlist_foreach$fwork")
#declnamesynop("qlist_foreach")
#declnamesynop("qlist_foreach_env")

(* ****** ****** *)

#declname("qstruct")
#declsynop2('\
#para('
#pats2xhtmls('\
abst@ype
qstruct_tsize =
  $extype"atslib_qlist_qstruct"
stadef qstruct = qstruct_tsize
absvt@ype
qstruct_vt0ype (a:vt@ype+, n:int) = qstruct_tsize
stadef qstruct = qstruct_vt0ype
')
')
')

#decldescrpt('\
#para('\

The abstract type #stacode("qstruct_tsize") is primarily needed for
allocating a variable in the calling frame of a function to store a
qstruct-value.

')

#para('\

Given a type T and an integer N,
the abstract type #stacode("qstruct_vt0ype(T, N)") is
for an unboxed queue containing N elements of type T.

')

')

(* ****** ****** *)

#declnamesynop("qstruct_initize")
#declnamesynop("qstruct_uninitize")
#declnamesynop("qstruct_objfize")
#declnamesynop("qstruct_unobjfize")

(* ****** ****** *)

#declnamesynop("qstruct_insert")
#decldescrpt('\
This function is a variant of #dyncode("qlist_insert").
')
#declnamesynop("qstruct_takeout")
#decldescrpt('\
This function is a variant of #dyncode("qlist_takeout").
')
#declnamesynop("qstruct_takeout_list")
#decldescrpt('\
This function is a variant of #dyncode("qlist_takeout_list").
')

(* ****** ****** *)

#declnamesynop("qlist_node_vtype")
#decldescrpt('\

This abstract viewtype is for the list-nodes in a qlist-object.

')

(* ****** ****** *)

#declnamesynop("mynode")
#declnamesynop("mynode0")
#declnamesynop("mynode1")

(* ****** ****** *)

#declnamesynop("mynode2ptr")
#declnamesynop("mynode_free_null")

(* ****** ****** *)

#declnamesynop("mynode_make_elt")
#declnamesynop("mynode_getref_elt")

#declnamesynop("mynode_free_elt")
#declnamesynop("mynode_getfree_elt")

(* ****** ****** *)

#declnamesynop("qlist_insert_ngc")
#declnamesynop("qlist_takeout_ngc")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("iseqz")
#declnamesynop("isneqz")

(* ****** ****** *)

#declnamesynop("length")

(* ****** ****** *)

#declnamesynop("fprint")

(* ****** ****** *)

(* end of [qlist.atxt] *)
