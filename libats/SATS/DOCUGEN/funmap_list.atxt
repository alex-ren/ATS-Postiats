(* ****** ****** *)

%{
implement srcfilename_get () = "../funmap_list.sats"
%}

(* ****** ****** *)

%{
//
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_funmap_list")
//
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/funmap_list\
")

(* ****** ****** *)

#declpreamble("\

This package implements functional maps based on lists.
Note that this is only practical for maps of short size (e.g.,
containing only a few dozens keys).

")

(* ****** ****** *)

#declnamesynop("map")
#decldescrpt("\

The type constructor #stacode("map") is a shorthand for
#stacode("map_type").  ")

#declnamesynop("map_type")

(* ****** ****** *)

#declnamesynop("equal_key_key")
#decldescrpt("This function is for testing whether two given map keys are equal.")

(* ****** ****** *)

#declnamesynop("funmap_nil")
#decldescrpt("This function forms an empty map.")

(* ****** ****** *)

#declnamesynop("funmap_size")
#decldescrpt("\

This function returns the size of a given map. Its time complexity is
O(n). ")

(* ****** ****** *)

#declnamesynop("funmap_search")
#declnamesynop("funmap_search_opt")

(* ****** ****** *)

#declnamesynop("funmap_insert")
#declnamesynop("funmap_insert_opt")
#declnamesynop("funmap_insert_any")

(* ****** ****** *)

#declnamesynop("funmap_takeout")
#declnamesynop("funmap_takeout_opt")
#declnamesynop("funmap_remove")

(* ****** ****** *)

#declnamesynop("funmap_foreach")
#declnamesynop("funmap_foreach_env")
#declnamesynop("funmap_foreach$fwork")

(* ****** ****** *)

#declnamesynop("funmap_listize")

(* ****** ****** *)

#declnamesynop("funmap_flistize")
#declnamesynop("funmap_flistize$fopr")

(* ****** ****** *)

(* end of [funmap_list.atxt] *)
