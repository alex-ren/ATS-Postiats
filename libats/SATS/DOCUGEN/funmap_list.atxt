(* ****** ****** *)

%{
implement srcfilename_get () = "../funmap_list.sats"
%}

(* ****** ****** *)

%{
//
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_funmap_list")
//
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/funmap_list\
")

(* ****** ****** *)

#declpreamble("\

This package implements functional maps based on lists.
Note that this is only practical for maps of short size (e.g.,
containing only a few dozens keys).

")

(* ****** ****** *)

#declnamesynop("map")
#decldescrpt("\

The type constructor #stacode("map") is a shorthand for
#stacode("map_type").  ")

#declnamesynop("map_type")

(* ****** ****** *)

#declnamesynop("equal_key_key")
#decldescrpt("This function is for testing whether two given map keys are equal.")

(* ****** ****** *)

#declnamesynop("funmap_nil")
#decldescrpt("This function forms an empty map.")

(* ****** ****** *)

#declnamesynop("funmap_size")
#decldescrpt("\

This function returns the size of a given map. Its time complexity is
O(n). ")

(* ****** ****** *)

#declnamesynop("funmap_search")
#decldescrpt('\

Given a map and a key, this function returns a boolean value to indicate
whether an item associated with the key has been found in the map. If found, the
item is stored in the third (call-by-reference) argument of the function.
The time complexity of #dyncode("funmap_search") is O(log(n)).

')

#declnamesynop("funmap_search_opt")
#decldescrpt('\

This function is the optional variant of the function #dyncode("funmap_search").

')

(* ****** ****** *)

#declnamesynop("funmap_insert")
#declnamesynop("funmap_insert_opt")
#decldescrpt('\

This function is the optional variant of the function #dyncode("funmap_insert").

')

(* ****** ****** *)

#declnamesynop("funmap_insert_any")
#decldescrpt("\

Given a map, a key and an item, this function inserts the key-item pair
into the map. Note that the insertion is carried out even in the case where
the given key is already associated with some item in the map.
The time complexity of #dyncode("funmap_insert_any") is O(n).

")

(* ****** ****** *)

#declnamesynop("funmap_takeout")
#declnamesynop("funmap_takeout_opt")
#declnamesynop("funmap_remove")

(* ****** ****** *)

#declnamesynop("funmap_foreach")
#declnamesynop("funmap_foreach_env")
#declnamesynop("funmap_foreach$fwork")

(* ****** ****** *)

#declnamesynop("funmap_listize")

(* ****** ****** *)

#declnamesynop("funmap_flistize")
#declnamesynop("funmap_flistize$fopr")

(* ****** ****** *)

(* end of [funmap_list.atxt] *)
