(* ****** ****** *)

%{
implement srcfilename_get () = "../funmap_avltree.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_funmap_avltree")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/funmap_avltree\
")

(* ****** ****** *)

#declpreamble("\

This package implements functional maps based on AVL-trees.

")

(* ****** ****** *)

#declnamesynop("map")
#decldescrpt("\

The type constructor #stacode("map") is a shorthand for
#stacode("map_type").  ")

#declnamesynop("map_type")

(* ****** ****** *)

#declnamesynop("compare_key_key")
#decldescrpt("This function is for comparing keys in maps.")

(* ****** ****** *)

#declnamesynop("funmap_nil")
#decldescrpt("This function forms an empty map.")

(* ****** ****** *)

#declnamesynop("funmap_size")
#decldescrpt("\

This function returns the size of a given map. Its time complexity is
O(n). ")

(* ****** ****** *)

#declnamesynop("funmap_search")
#decldescrpt('\

Given a map and a key, this function returns a boolean value to indicate
whether an item associated with the key has been found in the map. If found, the
item is stored in the third (call-by-reference) argument of the function.
The time complexity of #dyncode("funmap_search") is O(log(n)).

')

#declnamesynop("funmap_search_opt")
#decldescrpt('\

This function is the optional variant of the function #dyncode("funmap_search").

')

(* ****** ****** *)

#declnamesynop("funmap_insert")
#decldescrpt('\

Given a map, a key and an item, this function inserts the key-item pair
into the map.  Note that the first argument of the function is
call-by-reference, and the updated map is stored in it after the function
returns. The boolean value returned by this function indicates whether the
given key is already associated with some item in the given map. If that is
the case, then the original item assciated with the given key is stored in
the third (call-by-reference) argument after the function returns.
The time complexity of #dyncode("funmap_insert") is O(log(n)).

')

#declnamesynop("funmap_insert_opt")
#decldescrpt('\

This function is the optional variant of the function #dyncode("funmap_insert").

')

(* ****** ****** *)

#declnamesynop("funmap_insert_any")
#decldescrpt("\

Given a map, a key and an item, this function inserts the key-item pair
into the map. Note that the insertion is carried out even in the case where
the given key is already associated with some item in the map.
The time complexity of #dyncode("funmap_insert_any") is O(log(n)).

")

(* ****** ****** *)

#declnamesynop("funmap_takeout")
#decldescrpt('\

Given a map and a key, this function returns a boolean value to indicate
whether a key-item pair whose key equals the given key is removed from the
map. Note that the first argument of the function is call-by-reference, and
the updated map is stored in it after the function returns.  In the case
where a key-item pair is removed, then the item in the pair is stored in
the third (call-by-reference) argument of the function.\

')

#declnamesynop("funmap_takeout_opt")
#decldescrpt('\

This function is the optional variant of the function #dyncode("funmap_takeout").

')

#declnamesynop("funmap_remove")
#decldescrpt('\

This function is like #dyncode("funmap_takeout") except that it does not
return of the removed item.

')

(* ****** ****** *)

#declnamesynop("fprint_funmap")
#decldescrpt('\

This function prints out a given map.

')

#declnamesynop("fprint_funmap$sep")
#decldescrpt('\

This function is called by #dyncode("fprint_funmap") to print out the
separator between key-item pairs.

')

#declnamesynop("fprint_funmap$mapto")
#decldescrpt('\

This function is called by #dyncode("fprint_funmap") to print out the
separator between the key and the item in a key-item pair.

')


(* ****** ****** *)

#declnamesynop("funmap_foreach")
#decldescrpt('\

This function traverse a given map.

')

#declnamesynop("funmap_foreach_env")
#declnamesynop("funmap_foreach$fwork")

(* ****** ****** *)

#declnamesynop("funmap_listize")

(* ****** ****** *)

#declnamesynop("funmap_flistize")
#declnamesynop("funmap_flistize$fopr")

(* ****** ****** *)

#declnamesynop("funmap_avltree_height")
#decldescrpt("\

Given a map represented by some AVL-tree, this function returns the
height of the tree. ")

(* ****** ****** *)

(* end of [funmap_avltree.atxt] *)
