(* ****** ****** *)

%{
implement srcfilename_get () = "../funmap_avltree.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_funmap_avltree")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/funmap_avltree\
")

(* ****** ****** *)

#declpreamble("\

This package implements functional maps based on AVL-trees.

")

(* ****** ****** *)

#declnamesynop("map")
#decldescrpt("\

The type constructor #stacode("map") is a shorthand for
#stacode("map_type").  ")

#declnamesynop("map_type")

(* ****** ****** *)

#declnamesynop("compare_key_key")
#decldescrpt("This function is for comparing keys in maps.")

(* ****** ****** *)

#declnamesynop("funmap_nil")
#decldescrpt("This function forms an empty map.")

(* ****** ****** *)

#declnamesynop("funmap_size")
#decldescrpt("\

This function returns the size of a given map. Its time complexity is
O(n). ")

(* ****** ****** *)

#declnamesynop("funmap_search")
#declnamesynop("funmap_search_opt")

(* ****** ****** *)

#declnamesynop("funmap_insert")
#declnamesynop("funmap_insert_opt")

(* ****** ****** *)

#declnamesynop("funmap_takeout")
#declnamesynop("funmap_takeout_opt")
#declnamesynop("funmap_remove")

(* ****** ****** *)

#declnamesynop("fprint_funmap")
#declnamesynop("fprint_funmap$sep")
#declnamesynop("fprint_funmap$mapto")

(* ****** ****** *)

#declnamesynop("funmap_foreach")
#declnamesynop("funmap_foreach_env")
#declnamesynop("funmap_foreach$fwork")

(* ****** ****** *)

#declnamesynop("funmap_listize")

(* ****** ****** *)

#declnamesynop("funmap_flistize")
#declnamesynop("funmap_flistize$fopr")

(* ****** ****** *)

#declnamesynop("funmap_avltree_height")
#decldescrpt("\

Given a map represented by some AVL-tree, this function returns the
height of the tree. ")

(* ****** ****** *)

(* end of [funmap_avltree.atxt] *)
