(* ****** ****** *)

%{
implement srcfilename_get () = "../strarr.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/libats_ML_strarr")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/libats/ML/strarr\
")

(* ****** ****** *)

#declpreamble("\

The functions declared in this package are primarily for processing strings
in functional programming, where a string is represented as an array of
characters plus its size. Sometimes, the name #emph("strarr-value") is used
to refer to such a string.

")

(* ****** ****** *)

#declnamesynop("strarr")
#declnamesynop("strarr_type")

(* ****** ****** *)

#declnamesynop("strarr2array")
#decldescrpt("\
This cast function turns a strarr-value to an array of characters.\
")

#declnamesynop("array2strarr")
#decldescrpt("\
This cast function turns an array of characters to a strarr-value.\
")

(* ****** ****** *)

#declnamesynop("strarr_make_string")
#decldescrpt("\

This function, which overloads the symbol #dyncode("strarr"), builds
a strarr-value corresponding to a given C-style string.\

")

(* ****** ****** *)

#declnamesynop("strarr_make_substring")

(* ****** ****** *)

#declnamesynop("strarr_get_at_gint")
#declnamesynop("strarr_get_at_guint")

(* ****** ****** *)

#declnamesynop("strarr_get_range")

(* ****** ****** *)

#declnamesynop("print_strarr")
#declnamesynop("prerr_strarr")
#declnamesynop("fprint_strarr")

(* ****** ****** *)

#declnamesynop("strarr_copy")
#decldescrpt("\
Given a strarr-value, this function returns a copy of it.
")

(* ****** ****** *)

#declnamesynop("strarr_append")
#decldescrpt("\

This function, which overload the symbol #dyncode("+"), returns the
concatenation of two given strings.

")

(* ****** ****** *)

#declnamesynop("strarr_tabulate")
#decldescrpt("\

Given a size n and a function f, this function returns an strarr-value str
of size n such that each str[i] is initialized with the value returned by f(i),
where i ranges from 0 until n-1, inclusive.\

")

(* ****** ****** *)

#declnamesynop("strarr_foreach")
#decldescrpt("\

This function traverses its first argument (a string) from the start to the
end and applies to each encountered character its second argument (a
closure-function).\

")
#declexample("\

The following code prints a given string onto the standard output channel:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/strarr.sats"
//
implement
main0 () =
{
  val out = stdout_ref
  val cs = (strarr)"abcdefg"
  val () = strarr_foreach (cs, lam (c) => fprint_char (out, c))
  val () = fprint_newline (out)
} // end of [main0]
')
")

(* ****** ****** *)

#declnamesynop("strarr_iforeach")

(* ****** ****** *)

#declnamesynop("strarr_rforeach")
#decldescrpt("\

This function traverses its first argument (a string) from the end to the
start and applies to each encountered character its second argument (a
closure-function).\

")
#declexample("\

The following code prints the reverse of a given string onto the standard
output channel:

#pats2xhtmld_tryit('\
//
staload "libats/ML/SATS/strarr.sats"
//
implement
main0 () =
{
  val out = stdout_ref
  val cs = (strarr)"abcdefg"
  val () = strarr_rforeach (cs, lam (c) => fprint_char (out, c))
  val () = fprint_newline (out)
} // end of [main0]
')
")

(* ****** ****** *)
//
// HX: various overloaded symbols
//
(* ****** ****** *)

#declname("Overloaded Symbols")

(* ****** ****** *)

#declnamesynop("iseqz")
#declnamesynop("isneqz")

(* ****** ****** *)

#declnamesynop("<")
#declnamesynop("<=")
#declnamesynop(">")
#declnamesynop(">=")
#declnamesynop("=")
#declnamesynop("!=")
#declnamesynop("compare")

(* ****** ****** *)

#declnamesynop("length")

(* ****** ****** *)

#declnamesynop("[]")

(* ****** ****** *)

#declnamesynop("strarr_get_at")

(* ****** ****** *)

#declnamesynop("+")

(* ****** ****** *)

#declnamesynop("print")
#declnamesynop("prerr")
#declnamesynop("fprint")

(* ****** ****** *)

(* end of [strarr.atxt] *)
