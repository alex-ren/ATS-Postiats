(* ****** ****** *)

%{
implement srcfilename_get () = "../reference.sats"
%}

(* ****** ****** *)

%{
val () = patscode_count_reset()
val () = patscode_prefix_set("TRYIT/prelude_reference")
%}

(* ****** ****** *)

#decltitle("\
ATSLIB/prelude/reference\
")

(* ****** ****** *)

#declpreamble('\
#para("\
A reference is just a persistent array of size 1. It is persistent in the
sense that the memory associated with a reference is heap-allocated and
can only be reclaimed by GC. While it is allowed to store linear values
in references, doing so demands caution as resources contained in
references may be inadvertently leaked.
")
')#comment("declpreamble")

(* ****** ****** *)

#declnamesynop("ref_get_ptr")
#decldescrpt('\
This cast function (castfn) returns the pointer associated with a given
reference. Note that the returned pointer is guaranteed to be non-null.
')

(* ****** ****** *)

#declnamesynop("ref_get_viewptr")
#decldescrpt('\
This cast function (castfn) returns the boxed at-view and pointer
associated with a given reference. If the value stored in a reference is
linear, then it is not allowed for the value be taken out from the
reference. Instead, #dyncode("ref_get_viewptr") can be called on the
reference to allow that the value be processed in situ.
')
#declexample('\
The following function #dyncode("ref_exch_at")
exchanges the contents of a reference and a variable:
#pats2xhtmld_tryit('\
fun{a:vt0p}
ref_exch_at (
  r: ref (a), x: &a >> a
) : void = let
  val (
    vbox pf | p
  ) = ref_get_viewptr (r)
  val tmp = !p
in
  !p := x; x := tmp
end // end of [ref_exch_at]
')
Note that the type for the contents of r and x can be linear.
')

(* ****** ****** *)

#declnamesynop("ref")
#decldescrpt('\
This function creates a reference initialized with its given argument.
')
#declnamesynop("ref_make_elt")
#decldescrpt('\
This function does the same as #dyncode("ref").
')

(* ****** ****** *)

#declnamesynop("ref_make_viewptr")
#decldescrpt('\
This cast function (castfn) turns a pointer with a proof of at-view into a
reference.
')
#declexample('\

The following code implements a counter:

#pats2xhtmld_tryit('\
local

var __count: int = 0 // it is statically allocated
val theCount =
  ref_make_viewptr {int} (view@(__count) | addr@(__count))
// end of [val]

in (* in of [local] *)

fun theCount_get (): int = !theCount

fun theCount_inc (): void = !theCount := !theCount + 1

fun theCount_getinc
  (): int = let
  val n = !theCount; val () = !theCount := n + 1 in n
end // end of [theCount_getind]

fun theCount_reset (): void = !theCount := 0

end // end of [local]
')

The specialty of this implementation is that it does not make use of any
dynamic memory allocation. This is a style often necessary for low-level
embedded systems programming.

')

(* ****** ****** *)

#declnamesynop("ref_get_elt")
#decldescrpt('\
This function returns the value stored in a given reference.
Note that the type of the value is nonlinear.
')

(* ****** ****** *)

#declnamesynop("ref_set_elt")
#decldescrpt('\

This function stores a value (the second argument) into a given reference
(the first argument).  Note that the type of the value is nonlinear.

')

(* ****** ****** *)

#declnamesynop("ref_exch_elt")
#decldescrpt('\

This function exchanges the value in a given reference (the first argument)
with the value in a variable (the second argument).  Note that the type of
these values can be linear.  ')

(* ****** ****** *)

#declnamesynop("ref_app_fun")
#declnamesynop("ref_app_funenv")

(* ****** ****** *)

#declnamesynop("ref_vtakeout")
#decldescrpt('\

This function is called to borrow a proof of at-view for the value to which
a given reference points. Note that borrowing of this style is
fundamentally unsafe but can be of great convenience in practice.

')

(* ****** ****** *)

(* end of [reference.atxt] *)
